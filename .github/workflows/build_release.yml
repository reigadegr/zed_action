name: Release Build

on:
  workflow_dispatch:
    inputs:
      TOOLCHAINS:
        type: choice
        description: "使用的工具链"
        required: true
        default: "nightly"
        options:
          - "nightly"
          - "stable"
      TARGET:
        type: choice
        description: "编译的目标三元组"
        required: true
        default: "x86_64-pc-windows-msvc"
        options:
          - "x86_64-unknown-linux-gnu"
          - "aarch64-unknown-linux-gnu"
          - "x86_64-pc-windows-msvc"
          - "aarch64-pc-windows-msvc"
          - "aarch64-apple-darwin"
          - "x86_64-apple-darwin"
      TRANSLATION:
        type: boolean
        description: "是否汉化？"
        required: true
        default: true

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Optimize build performance
  CARGO_INCREMENTAL: 0
  TZ: Asia/Shanghai

jobs:
  # Build strategy check - determine build type based on trigger
  build-check:
    name: Build Strategy Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug Show Selected Inputs
        run: |
          echo "-----------------------"
          echo "Selected TOOLCHAINS: ${{ github.event.inputs.TOOLCHAINS }}"
          echo "Selected TARGET: ${{ github.event.inputs.TARGET }}"
          echo "Selected TRANSLATION: ${{ github.event.inputs.TRANSLATION }}"
          echo "-----------------------"

  preprocessing-code:
    name: Preprocessing Code
    needs: [build-check]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    env:
      RUSTFLAGS: ${{ matrix.cross == 'false' && '-C target-cpu=native' || '' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: "ubuntu-latest"
            target: ${{ github.event.inputs.TARGET }}
            cross: ${{ contains(github.event.inputs.TARGET, 'linux') && 'true' || 'false' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install system dependencies (Ubuntu)
        uses: awalsh128/cache-apt-pkgs-action@latest 
        with: 
          packages: llvm clang git python3 python-is-python3
          execute_install_scripts: true

      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: Clone zed sources
        shell: bash
        run: |
          if [ "${{ github.event.inputs.TRANSLATION }}" = "true" ]; then
              git clone --depth 1 https://github.com/tc999/zed-loc zed_loc
          else
              mkdir zed_loc
          fi

          cd zed_loc
          git clone --depth 1 https://github.com/zed-industries/zed
          cd zed
          git show > zed_last_commit.txt
          cd  ..
          if [ "${{ github.event.inputs.TRANSLATION }}" = "true" ]; then
              python3 replace.py
          fi

      - name: Localize Zed into Chinese
        if: ${{ github.event.inputs.TRANSLATION == 'true' }}
        shell: bash
        run: |
          cd zed_loc/zed
          git clone --depth 1 https://github.com/reigadegr/zed-translation zed_translation
          python3 zed_translation/2.trans.py
          git diff | wc -l
          rm -rf zed_translation .git rust-toolchain.toml || true

      - name: Upload preprocessing code
        uses: actions/upload-artifact@v4
        with:
          name: zed_preprocessing_code
          compression-level: 1
          path: zed_loc/zed/*

  # Build zed binaries
  build-zed:
    name: Build Zed
    needs: [build-check,preprocessing-code]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 180
    env:
      RUSTFLAGS: ${{ matrix.cross == 'false' && '-C target-cpu=native' || '' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Platform builds
          - os: ${{ contains(github.event.inputs.TARGET, 'windows') && 'windows' || (contains(github.event.inputs.TARGET, 'apple') && 'macos' || 'ubuntu') }}-${{ contains(github.event.inputs.TARGET, 'windows') && '11' || (contains(github.event.inputs.TARGET, 'apple') && 'latest' || '24.04') }}${{ contains(github.event.inputs.TARGET, 'aarch64') && !contains(github.event.inputs.TARGET, 'apple') && '-arm' || '' }}
            target: ${{ github.event.inputs.TARGET }}
            cross: ${{ contains(github.event.inputs.TARGET, 'linux') && 'true' || 'false' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Rust environment
        uses: ./.github/actions/setup
        with:
          rust-version: ${{ github.event.inputs.TOOLCHAINS }}
          target: ${{ matrix.target }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          install-cross-tools: ${{ matrix.cross }}

      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: Setup TimeZone
        if: runner.os == 'Linux'
        run: |
          sudo -E rm -rf /etc/localtime
          sudo -E ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

      - name: Download zed preprocessing code
        uses: actions/download-artifact@v4
        with:
          name: zed_preprocessing_code

      - name: Replace mallocator
        shell: bash
        run: |
          sed -i 's#mimalloc = { version = "0.1"#mimalloc = { version = "0.1.48"#g' crates/zed/Cargo.toml || true
          cargo add mimalloc --features override,no_thp,v3 -p zed || true

      - name: Fix upstream bugs
        shell: bash
        run: |
          git init || echo "无需init"
          rm -rf target && echo "删除了target" || echo "无需删除"
          git add  . && git commit -m "auto commit"

          for i in "full_opt.patch"; do
             url="https://github.com/reigadegr/zed_action/raw/main/patchs/$i"
             echo "补丁直链: $url"
             curl -L $url -o "$i"
             patch -p1 -F 3 < $i && git add  . && git commit -m "$i commit" || git reset --hard
             git clean -df
          done

      - name: Reset flags
        shell: bash
        run: |
          mkdir -p .cargo/ || echo "无需mkdir"
          rm -f .cargo/config.toml || echo "无需删除profile"
          curl -L https://github.com/reigadegr/zed_action/raw/main/.cargo/config.toml -o .cargo/config.toml

      - name: Build zed
        shell: bash
        run: |
          rm -rf target && echo "删除了target" || echo "无需删除"
          toolchain="${{ github.event.inputs.TOOLCHAINS }}"
          platform="${{ contains(github.event.inputs.TARGET, 'windows') && 'windows' || (contains(github.event.inputs.TARGET, 'apple') && 'apple' || 'linux') }}"
          file="build_"$toolchain"_"$platform".sh"

          url="https://github.com/reigadegr/zed_action/raw/main/script/$file"
          echo "脚本直链: $url"
          curl -L $url -o "$file"
          cat "$file"; ls -al

          bin_name="zed"
          sh "$file" "${{ matrix.target }}" "$bin_name"

          is_windows="${{ contains(github.event.inputs.TARGET, 'windows') && 'true' || 'false' }}"
          if [ "$is_windows" = "true" ]; then
              bin_name=$bin_name.exe
          fi
          file="$(find target -name "$bin_name")"
          echo "$(realpath $file)"
          mkdir -p ${{ github.event.inputs.TARGET }}_module || echo "已有默认目录"
          dd if=target/"${{ matrix.target }}"/release/$bin_name of=./"${{ matrix.target }}"_module/$bin_name
          git log > ./"${{ matrix.target }}"_module/commits.txt
          cp -af zed_last_commit.txt ./"${{ matrix.target }}"_module/zed_last_commit.txt || true

      - name: Fix post setup rust environment step
        shell: bash
        run: |
          rm -rf .github/actions/setup || echo "不需要删除目录"
          mkdir -p .github/actions/setup || echo "不需要创建目录"
          curl -L https://github.com/reigadegr/zed_action/raw/main/.github/actions/setup/action.yml -o .github/actions/setup/action.yml

      - name: Upload to GitHub artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.TARGET }}_zed
          path: ${{ matrix.target }}_module/*
          retention-days: 3
